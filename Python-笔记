Python基础
运算符
	算数运算符：
	+	加 - 两个对象相加	a + b 输出结果 30
	-	减 - 得到负数或是一个数减去另一个数	a - b 输出结果 -10
	*	乘 - 两个数相乘或是返回一个被重复若干次的字符串	a * b 输出结果 200
	/	除 - x除以y	b / a 输出结果 2
	%	取余 - 返回除法的余数	b % a 输出结果 0
	**	幂 - 返回x的y次幂	a**b 为10的20次方， 输出结果 100000000000000000000
	//	取整除 - 返回商的整数部分（向下取整）	
										>>> 9//2
										4
										>>> -9//2
										-5
	比较（判断）运算符：
	==	等于 - 比较对象是否相等	(a == b) 返回 False。
	!=	不等于 - 比较两个对象是否不相等	(a != b) 返回 true.
	<>	不等于 - 比较两个对象是否不相等。python3 已废弃。	(a <> b) 返回 true。这个运算符类似 != 。
	>	大于 - 返回x是否大于y	(a > b) 返回 False。
	<	小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。	(a < b) 返回 true。
	>=	大于等于 - 返回x是否大于等于y。	(a >= b) 返回 False。
	<=	小于等于 - 返回x是否小于等于y。	(a <= b) 返回 true。


	赋值运算符：
	=	简单的赋值运算符	c = a + b 将 a + b 的运算结果赋值为 c
	+=	加法赋值运算符	c += a 等效于 c = c + a
	-=	减法赋值运算符	c -= a 等效于 c = c - a
	*=	乘法赋值运算符	c *= a 等效于 c = c * a
	/=	除法赋值运算符	c /= a 等效于 c = c / a
	%=	取模赋值运算符	c %= a 等效于 c = c % a
	**=	幂赋值运算符	c **= a 等效于 c = c ** a
	//=	取整除赋值运算符	c //= a 等效于 c = c // a


	逻辑运算符：
	and	x and y	布尔"与" - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。	（都真才真）
	or	x or y	布尔"或" - 如果 x 是非 0，它返回 x 的计算值，否则它返回 y 的计算值。	（一真则真，都假则假）
	not	not x	布尔"非" - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。（取反）


数据类型和变量
	数据类型：
		整数
		浮点数（小数）
		字符串---用单引号或双引号扩起来的任意文本
		转义字符---\，例如：\n（换行）\t（制表符）\\（表示单个\）
		布尔值---运算结果，表示为True  False
		空值---用None表示，None不等于0
	变量：
		变量不仅可以是数字，还可以是任意数据类型。变量在程序中就是用一个变量名表示了，变量名必须是大小写英文、数字和=的组合 例： a = 1（变量a就是一个整数）
		打印变量括号内可不带双引号
	常量：
		就是不能变的变量，在Python中，通常用全部大写的变量名表示常量
		／计算结果是浮点型，／／（地板除）计算结果为永远为整数


字符串和编码
	字符串：
		ord()函数获取字符的整数表示，例：print(ord('旺'))
		chr()函数把编码转换为对应的字符，例：print(chr(25991))
		len()函数计算的是的字符数,例：print(len(b'43214')) 
		encode()函数计算的是中文的字符数,例：print(len('旺仔俱乐部'.encode('utf-8'))) 
	格式化：
		%是用来格式化字符串的。
		%s表示用字符串替换
		%d表示用整数替换
		%f	浮点数
		%s	字符串
		%x	十六进制整数
		format()
		另一种格式化字符串的方法是使用字符串的format()方法，它会用传入的参数依次替换字符串内的占位符{0}、{1}……，不过这种方式写起来比%要麻烦得多
			例：
			s1 = 72
			s2 = 86
			r = (s2-s1)/s1
			print ("%.2f %%" % (100*r))  
				#第一个%为第四个%的占位符
				#第二、三个%%表示的为转义一个%符号
				#第四个%表示的为格式化（100*r）
			print ("小明的成绩从去年的{0}分提升到了今年的{1}分，他成绩提升了{2:.1f}%".format(s1,s2,100*r))
		f-string
		最后一种格式化字符串的方法是使用以f开头的字符串，称之为f-string，它和普通字符串不同之处在于，字符串如果包含{xxx}，就会以对应的变量替换
			
			s1 = 72
			s2 = 86
			r = (s2-s1)/s1*100
			print(f'小明的成绩从去年的{s1:.1f}提升到今年的{s2:.1f}分，小明的成绩提升了{r:.1f}%')


使用list和tuple
	list
		Python内置的一种数据类型是列表：list。list是一种有序的集合，可以随时添加和删除其中的元素。
			例：    classmates = ['Michael', 'Bob', 'Tracy']
		往list中追加元素到末尾：用append()方法
			例：    classmates.append("ABC") ---默认增加在最后一个
		也可以把元素插入到指定的位置：用insert()方法
			例：    classmates.insert(1,"DEF")
		删除list末尾的元素：用pop()方法
			例：		classmates.pop() ---默认删除最后一个
		删除指定位置的元素，用pop(1)方法
			例：		classmates.pop(1)
		某个元素替换成别的元素，可以直接赋值给对应的索引位置
			例：		classmates [1] = "OXO"
		list元素也可以是另一个list
			例：
				s = ['python', 'java', ['asp', 'php'], 'scheme']
				注意：s只有4个元素，其中s[2]又是一个list
			 		 要拿到'php'可以写s[2][1]

	tuple
		tuple和list非常类似，但是tuple一旦初始化就不能修改
		tuple的陷阱：当你定义一个tuple时，在定义的时候，tuple的元素就必须被确定下来


条件判断
	if语句：注意不要少写了冒号:
	if语句的完整形式就是：
		if <条件判断1>:
    		<执行1>
		elif <条件判断2>:
   			<执行2>
		elif <条件判断3>:
    		<执行3>
		else:
    		<执行4>
    if语句执行有个特点，它是从上往下判断，如果在某个判断上是True，把该判断对应的语句执行后，就忽略掉剩下的elif和else

    注意:如果某些条件成立执行了相关的代码,那么其他的情況的代码解释器根本不会执行。

    再议input
    	读取用户输入


    IF嵌套：


循环
	Python的循环有两种：
		一种是for...in循环，依次把list或tuple中的每个元素迭代出来
			例：
			names = ['Michael', 'Bob', 'Tracy']
			for name in names:
	    	print(name)
	    一种是for x in ...循环，就是把每个元素代入变量x，然后执行缩进块的语句。
	    	例：
	    	sum = 0
			for x in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]:
    			sum = sum + x
			print(sum)
	range()函数，可以生成一个整数序列，再通过list()函数可以转换为list
		例：
		range(5)生成的序列是从0开始小于5的整数

	while 循环，只要条件满足，就不断循环，条件不满足时退出循环
		要计算100以内所有奇数之和，可以用while循环实现
		例：		
		sum = 0
		n = 99
		while n > 0:
    		sum = sum + n
    		n = n - 2
		print(sum)
	条件成立了要执行的代码1

	break和comtinue是循环中满足一定条件退出循环的两种不同方式

下标
    字符数据从0开始顺序分配一个编号 使这个编号精确找到某个字符数据  -- 称之为：下标／索引／索引值

切片
    切片是指对操作的对象截取其中一部分的操作。字符串、元祖、列表都支持切片操作。
    语法 -- 序列[开始位置的下标:结束位置的下标:步长(选取间隔)]
    注意 切片结束位置不包含下标对应的数据 | 步长是选取间隔，默认是1

字符串常用方法：
    字符串的常操作方法有查找、修改和判断三大类
    操作函数的三个学习方向 -- 记住函数的单词  --记住函数的作用  --函数传递参数的方式（函数参数的写法）
        查找  # 所谓字符串查找方法，即是查找子串在字符串中的位置或出现的次数
            # -- find(): 检测某个子串是否包含在这个字符串中，如果子串在字符串中，返回这个子串开始的位置下标，否则返回-1
            # -- index()：检测某个子串是否包含在这个字符串中，如果子串在字符串中，返回这个子串开始的位置下标，否则报异常
            # -- count()：返回某个子串在字符串中出现的次数
            # 语法：字符串序列.find(子串，开始位置下标，结束位置下标)  -- 开始和结束位置下标可以省略，表示在整个字符串序列中查找
        修改  # 修改字符串，指的是通过函数的形式字符串中的数剧
            # -- replace()：替换
            # 语法：字符串序列.replace(旧子串，新子串，替换次数)   --  替换次数如果查处子串出现次数，则替换次数为该子串出现次数
            # -- split()：按照指定字符分割字符串
            # 语法：字符串序列.split(分割字符，num)   -- num表示的是分割字符出现的次数，即将来返回数据个数为num+1个
            # -- join()：用一个字符或子串合并字符串，即是将多个字符串合并为一个新的字符串
            # 语法：字符或子串.join(多字符串组成的序列)
        转换
            # capitalize():将字符串第1个字符转换成大写
            # title()     # 每个单词首字母大写
            # upper()     # 所有单词小写-->大写
            # lower()     # 所有单词大写-->小写              语法：变量名／字符串序列.lower()
        删除空白
            # rstrip()    #rstrip 踢除右边的空白
            # lstrip()    #lstrip 剔除左边的空白
            # strip()     #strip 剔除左右空白
        字符串对齐
            # ljust()：返回一个原字符串左对齐，并使用指定字符（默认空格）填充至对应长度的新字符串。
            # -- 语法：字符串序列.ljust(长度，填充字符)
            # rjust()：右对齐
            # center()：中间对齐
        判断  # 判断真假，返回的数据类型为布尔类型：True 和 False
            # 语法：字符串序列.startswith(子串，开始位置下标，结束位置下标)
            # startswith()：检查字符串是否是以指定子串开头，是则返回True，否则返回False。如果设置开始和结束下标，则在指定范围内查找判断
            # endswith():检查字符串是否是以指定子串结尾，是则返回True，否则返回False。
            # isalpha()：如果字符串至少有一个字符并且所有字符都是字母则返回True，否则返回False
            # isdigit()：如果字符串只包含数字则返回True，否则返回False
            # isalnum()：如果字符串至少有一个字符并且所有字符都是字母或数字则返回True，否则返回False
            # isspace()：如果字符串中只包含空格，则返回True，否则返回False。
列表的常用操作：
            # 列表可以一次性储存多个数据，且可以为不同数据类型
            # 列表的作用是一次性储存多个数据，程序员可以多这些数据进行的操作有：增、删、改、查
            # 1、查找 - 下标
            # 2、查找 - 函数
                # index():返回指定数据所在位置的下标     -- 列表序列.index(指定数据，开始位置下标，结束位置下标)
                # count()：统计指定数据在当前列表中出现的次数     -- 列表序列.count(指定数据)
                # len()：访问列表长度，即列表中列表的数据         -- len(列表序列)
            # 3、查找 - 判断是否存在
                # in 判断指定数据在某个列表序列，在则返回True
                # not in 判断指定数据不在某个列表序列，不在则返回True
            # 4、增加  --作用：增加指定数据到列表中
                # append()：列表结尾增加数据       -- 语法：列表序列.append(数据)
                # extend()：列表结尾增加数据，如果是一个序列，则将这个序列的数据拆开逐一添加到列表    -- 语法：列表序列.extend(数据)
                # insert(): 指定位置新增数据    -- 语法：列表序列.insert（下标位置，数据）
                # insert(): 指定位置新增数据    -- 语法：列表序列.insert（下标位置，数据）
            # 5、删除
                # del：删除    -- 可以删除指定下标的数据
                # pop()：删除  --删除指定下标的数据（不指定，默认删除最后1个数据，无论是按照下标还是默认删除最后一个，pop函数都会返回被删除的数据）
                  -- 语法：新列表序列 = 列表序列.pop()
                # remove(数据)：移除列表中某个数据的第一个匹配项li
                # clear()：清空列表  -- 语法：列表序列.remove(数据) --（不可不指定数据）
            # 6、修改
                # 1、修改指定下标数据    -- 语法：列表序列[下标] = '数据'
                # 2、逆序 reverse()
                # 3、sort() 排序   升序(默认升序排序) 和 降序     -- 语法：列表序列.sort(key=None，reverse=False)
                     注意：reverse表示排序规则，reverse = False 升序（默认），reverse = True 降序
            # 7、复制
                # copy() 复制     -- 语法： 新列表序列 = 列表序列.copy()
列表嵌套：
        所谓列表嵌套指的就是一个列表里面包含了其他的子列表

定义元组：
        元组的特点-定义元组使用小括号且逗号隔开各个数据，数据可以是不同的数据类型
        注意：如果定义的元组只有一个数据，那么这个数据后面也要添加逗号，否则数据类型为int类型
定义的常见操作：
        元组数据不支持修改，只支持查找
        -  按下标查找数据
        -  index() 查找数据所在的下标
        -  count() 统计字符串个数
        -  len() 统计元组内数据个数
        注意：元组内的的直接数据如果立即修改则直接报错，但如果元组里面有列表，修改列表里的数据是支持的
字典：
    字典里面的数据是以【键值对】形式出现，字典数据和数据顺序没有关系，即字典不支持下标，后期无论数据如何变化，
    只需要按照对应键的名字查找数据即可
    # 字典 - 增    写法：字典序列[key] = 值      注意：key存在则修改这个key对应的值，不在则新增此键值对
    # 字典 - 删    del()/del 删除字典或删除字典中指定的键值对
    # 字典 - clear()清空字典
    遍历字典的元素
    xx.values() 查找元组里所有的value，返回一个可迭代对象
    xx.keys()   查找元组里所有的key，返回一个可迭代对象
    xx.items()  查找元组里所有的键值对，返回一个可迭代对象

    values     for 临时变量 in 字典序列.values():
                   print(临时变量)
    items      for 临时变量 in 字典序列.items():
                   print(临时变量)


    遍历字典的键值对
    items       for 临时变量1, 临时变量2 in 字典序列.items():
                   print(f'{临时变量1} : {临时变量2}')
    xx.items()  返回可迭代对象，内部是元组，元组有2个数据
                    元组数据1是字典的key，元组数据2是字典的value

创建集合：
    可以使用{}或这set()去创建，创建空集合只能用set(),用{}来创建空字典
    1、 集合是可变类型
    2、 集合有去重功能，如果追加的数据是集合已有的数据，则什么事情都不做
    增：
        # update    追加的是一个数据序列，不支持增加单一的数据
        # add   增加
    查：
        # in 判断数据在集合序列
        # not in 判断数据不在集合序列
    删：
        # remove 删除集合中的指定项，如果指定的项目不存在，则会引发报错
        # discrad 删除集合中的指定项，如果指定的项目不存在，不会引发报错

字符串、列表、元组、字典的区别：
                              字符串                             列表                                 元组                                字典
    书写方式                  ‘’或者“”                             []                                 ()                               {}、set()

    索引方式            1、从左往右以0开始                    1、从左往右以0开始                    1、从左往右以0开始                    1、从左往右以0开始
               2、从右往左以-1,开始写在方括号中        2、从右往左以-1,开始写在方括号中        2、从右往左以-1,开始写在方括号中         2、从右往左以-1,开始写在方括号中

    是否可以修改                不可以                             可以                                不可以                               可以

    拼接方式       +运算符连接在一起，用*运算符重复            使用+操作符进行拼接                    使用+操作符进行拼接                    ---------------

    是否是有序集合         ---------------                       有序集合                         ---------------                         无序集合

    特殊法则             反斜杠可以用来转义，             列表中元素的类型可以不相同，               1.tup1 = () # 空元组              1、字典是一种映射类型，它的元素是键值对。
                  使用r可以让反斜杠不发生转义           它支持数字，字符串甚至可以              2.tup2 = (20,) # 一个元素，          2、字典的关键字必须为不可变类型，且不能重复
                                                        包含列表（所谓嵌套）             需要在元素后添加逗号3.元素的类型可以不相同    3、创建空字典使用 { }

公共操作之运算符：
      运算符         描述            支持的容器类型
        +           合并          字符串、列表、元组
        *           复制          字符串、列表、元组
       in       元素是否存在       字符串、列表、元组、字典
      not in    元素是否不存在     字符串、列表、元组、字典

公共操作之函数：
    函数                                  描述
    len()                           计算容器中的元素个数
    del或del()                       删除
    max()                           返回容器中元素最大的值
    min()                           返回容器中元素最小的值
    range（start,end,step）          生成从start到end的数字，步长为step，供for循环使用
    enumerate                       用于一个可遍历的数据对象（如列表、元组或字符串）组合为一个索引序列，同时列出数据和数据下标
                                    一般用于for循环当中
列表推导式
    作用：用一个表达式创建一个有规律的列表或控制一个有规律的列表.
    列表推导式又称列表生成式
    格式：[xx for xx in range()]

字典推导式
    作用：快速合并列表为字典或提取字典中目标数据
    格式：{xx1: xx2 for … in …}

集合推导式
    注意：集合有数据去重功能
    格式：{xx for xx in …}

函数
    函数就是将一段具有独立功能的代码块整合到一个整体并命名，在需要的位置调用这个名称即可完成对应的需求
    函数在开发过程中，可以高效的实现代码重用
    注意：
        1、不同的需求，参数可有可无
        2、在Python中，函数必须是先定义后使用
        3、如果没有调用函数，函数里面的代码不会执行
        4、函数的执行流程
            当调用函数的时候，解释器回到定义函数的地方去执行下方缩进的代码，当这些代码执行完，回到调用函数的地方继续向下执行
            定义函数的时候，函数体内缩进的代码并没有执行







































