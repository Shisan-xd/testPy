# @Time     ：2021/10/11 10:56
# @Author   ：
# @File     ：day10_06函数参数之位置参数.py



# -- 位置参数：调用函数时根据函数定义的参数位置来传递参数
#    注意：参数和定义参数的顺序及个数必须一致
def user_info(name, age, gender='女'):
    print(f'名字是：{name}, 年龄是：{age}, 性别是：{gender}')


# user_info('Tom', 20, '哈')
user_info(100, 'Tom', '哈')  # 顺序    顺序和定义必须是一致的，否则导致数据无意义


# -- 关键字参数
# 函数调用，通过"键=值"形式加以指定。可以让函数更加清晰、容易使用，同时也清除了参数的顺序需求
user_info(age=20, name='Tom', gender='m')
# 函数调用时，如果有位置参数，位置参数必须在关键字参数的前面，但关键字参数之间不存在先后顺序
user_info('小明', 20, gender='m')
# user_info(age=20, gender='m', '小明') # 此处报错，'小明'是位置参数（位置参数必须在关键字参数的前面）



# -- 缺省参数：也叫默认参数，用于定义函数，为参数提供默认值，调用函数时可不传该默认参数的值
# 注意：所有位置参数必须在默认参数前，包括函数定义和调用
# 注意：函数调用时，如果为缺省参数传值则修改默认参数值，否则使用这个默认值
user_info('小明', age=12) # 因为gender有默认值，调用函数时未传值，则打印出来的是默认值


# -- 不定长参数之位置参数(可变参数)
# 不定长参数也叫可变参数。用于不确定调用的时候会传递多少个参数(不传参也可以)的场景。
# 此时,可用包裹(packing)位置参数,或者包裹关键字参数,来进行参数传递,会显得非常方便。

# - 1.包裹位置传递
# 接收所有位置参数，返回一个元组
def user_info1(*args):
    print(args)


user_info1('xixi')
user_info1('xixi', 20, 'wuhu')
user_info1()    # 不传参
# 注意：传进的所有参数都会被args变量收集,它会根据传进参数的位置合并为一个元组(tuple),args是元组类型，这就是包裹位置传递


# - 2.包裹关键字传递
def user_info2(**kwargs):
    print(kwargs)
# 无论是包裹位置传递还是包裹关键字传递，都是一个组包的过程


user_info2(name='hah', age=20)












